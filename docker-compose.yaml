services:
  database:
    image: postgres:17
    container_name: api_database
    restart: always
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 2G
    secrets:
      - db-password
    ports:
      - 5432:5432
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD_FILE: /run/secrets/db-password
      POSTGRES_DB: postgres
    volumes:
      - database_volume:/var/lib/postgresql/data
    networks:
      - api_network
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "postgres", "-d", "postgres"]
      interval: 5s
      timeout: 3s
      retries: 5

  api:
    container_name: FastAPI
    build:
      context: .
    restart: always
    secrets:
      - db-password
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD_FILE: /run/secrets/db-password
      POSTGRES_DB: postgres

    volumes:
      - data_folder:/app/data
    ports:
      - 8051:8000
    networks:
      - api_network
    depends_on:
      database:
        condition: service_healthy

  django:
    container_name: django_server
    image: ouslan/jp-webapp:latest
    restart: always
    secrets:
      - db-password
      - django-admin-password
      - django-admin-username
      - django-admin-email
      - django-secrets-password
    environment:
      DJANGO_SUPERUSER_USERNAME: ${DJANGO_SUPERUSER_USERNAME}
      DJANGO_SUPERUSER_EMAIL: ${DJANGO_SUPERUSER_EMAIL}
      DJANGO_SUPERUSER_PASSWORD: ${DJANGO_SUPERUSER_PASSWORD}
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: postgres
    command: >
      sh -c "python manage.py migrate &&
             python manage.py shell -c 'from django.contrib.auth.models import User; User.objects.filter(username=\"${DJANGO_SUPERUSER_USERNAME}\").exists() or User.objects.create_superuser(\"${DJANGO_SUPERUSER_USERNAME}\", \"${DJANGO_SUPERUSER_EMAIL}\", \"${DJANGO_SUPERUSER_PASSWORD}\")' &&
             python manage.py makemigrations &&
             python manage.py migrate &&
             python main.py &&
             python manage.py runserver 0.0.0.0:8000"
    ports: 
      - 8057:8000
    networks:
      - api_network
    depends_on:
      database:
        condition: service_healthy

networks:
  api_network:

volumes:
  database_volume:
  data_folder:

secrets:
  db-password:
    file: password.txt
  django-admin-password:
    file: admin-password.txt
  django-admin-username:
    file: admin-username.txt
  django-admin-email:
    file: admin-email.txt
  django-secrets-password:
    file: secrets-password.txt
